explicitPoint3D(a:xa,ya,za)
explicitPoint3D(b:xb,yb,zb)
explicitPoint3D(o:xo,yo,zo)
explicitPoint3D(p:xp,yp,zp)
explicitPoint3D(q:xq,yq,zq)

// b - a
xba = xb - xa
yba = yb - ya
zba = zb - za

// p - o
xpo = xp - xo
ypo = yp - yo
zpo = zp - zo

// q - o
xqo = xq - xo
yqo = yq - yo
zqo = zq - zo

// o - a
xoa = xo - xa
yoa = yo - ya
zoa = zo - za

// normal of opq, (p - o) cross (q - o)
ypo_zqo = ypo * zqo
zpo_yqo = zpo * yqo
zpo_xqo = zpo * xqo
xpo_zqo = xpo * zqo
xpo_yqo = xpo * yqo
ypo_xqo = ypo * xqo
// xnor, ynor, znor
xnor = ypo_zqo - zpo_yqo
ynor = zpo_xqo - xpo_zqo
znor = xpo_yqo - ypo_xqo

// (b - a) dot normal
x_ba_nor = xba * xnor
y_ba_nor = yba * ynor
z_ba_nor = zba * znor
temp_0 = x_ba_nor + y_ba_nor
lambda_n = temp_0 + z_ba_nor

// (o - a) dot normal
x_oa_nor = xoa * xnor
y_oa_nor = yoa * ynor
z_oa_nor = zoa * znor
temp_1 = x_oa_nor + y_oa_nor
lambda_d = temp_1 + z_oa_nor

// lambda = lambda_n * (b - a)
lambda_x = lambda_n * xba
lambda_y = lambda_n * yba
lambda_z = lambda_n * zba
beta_x = xa
beta_y = ya
beta_z = za