implicitPoint3D(p1:l1x,l1y,l1z,d1,b1x,b1y,b1z)
implicitPoint3D(p2:l2x,l2y,l2z,d2,b2x,b2y,b2z)
implicitPoint3D(p3:l3x,l3y,l3z,d3,b3x,b3y,b3z)
implicitPoint3D(p4:l4x,l4y,l4z,d4,b4x,b4y,b4z)

errorDefinition(SSI,S,3:lx;3;64;1.332267629550188e-15;2.000000000000002;ly;3;64;1.332267629550188e-15;2.000000000000002;lz;3;64;1.332267629550188e-15;2.000000000000002;d;2;16;8.881784197001253e-16;2.000000000000001)
errorDefinition(LPI,L,3:lx;4;256;5.995204332975847e-15;6.000000000000008;ly;4;256;5.995204332975847e-15;6.000000000000008;lz;4;256;5.995204332975847e-15;6.000000000000008;d;3;192;4.886390771174922e-015;6.000000000000007)
errorDefinition(TPI,T,3:lx;7;256;3.073097332162437e-13;144.0000000000005;ly;7;256;3.073097332162437e-13;144.0000000000005;lz;7;256;3.073097332162437e-13;144.0000000000005;d;6;256;1.314504061156187e-13;72.00000000000019)

// p1 is query point, p2-p3-p4 is the plane.
// orient3d: (p1 - p4) dot ((p2 - p4) cross (p3 - p4))

// we calculate determinant
//   | p1 - p4 |
//   | p2 - p4 |
//   | p3 - p4 |
// expand to (we assume that d1, d2, d3 and d4 are positive)
//   | d4 * (d1 * (b1 - b4) + l1) - d1 * l4 |
//   | d4 * (d2 * (b2 - b4) + l2) - d2 * l4 |
//   | d4 * (d3 * (b3 - b4) + l3) - d3 * l4 |

// -- d1 * l4
d1p4x = d1 * l4x
d1p4y = d1 * l4y
d1p4z = d1 * l4z

// -- d2 * l4
d2p4x = d2 * l4x
d2p4y = d2 * l4y
d2p4z = d2 * l4z

// -- d3 * l4
d3p4x = d3 * l4x
d3p4y = d3 * l4y
d3p4z = d3 * l4z

// -- b1 - b4
b1b4x = b1x - b4x
b1b4y = b1y - b4y
b1b4z = b1z - b4z

// -- b2 - b4
b2b4x = b2x - b4x
b2b4y = b2y - b4y
b2b4z = b2z - b4z

// -- b3 - b4
b3b4x = b3x - b4x
b3b4y = b3y - b4y
b3b4z = b3z - b4z

// -- d1 * (b1 - b4)
d1_b1b4x = d1 * b1b4x
d1_b1b4y = d1 * b1b4y
d1_b1b4z = d1 * b1b4z

// -- d2 * (b2 - b4)
d2_b2b4x = d2 * b2b4x
d2_b2b4y = d2 * b2b4y
d2_b2b4z = d2 * b2b4z

// -- d3 * (b3 - b4)
d3_b3b4x = d3 * b3b4x
d3_b3b4y = d3 * b3b4y
d3_b3b4z = d3 * b3b4z

// -- d1 * (b1 - b4) + l1
d1_b1b4_l1x = d1_b1b4x + l1x
d1_b1b4_l1y = d1_b1b4y + l1y
d1_b1b4_l1z = d1_b1b4z + l1z

// -- d2 * (b2 - b4) + l2
d2_b2b4_l2x = d2_b2b4x + l2x
d2_b2b4_l2y = d2_b2b4y + l2y
d2_b2b4_l2z = d2_b2b4z + l2z

// -- d3 * (b3 - b4) + l3
d3_b3b4_l3x = d3_b3b4x + l3x
d3_b3b4_l3y = d3_b3b4y + l3y
d3_b3b4_l3z = d3_b3b4z + l3z

// -- d4 * d1 * (b1 - b4) + l1
d4d1_b1b4_l1x = d4 * d1_b1b4_l1x
d4d1_b1b4_l1y = d4 * d1_b1b4_l1y
d4d1_b1b4_l1z = d4 * d1_b1b4_l1z

// -- d4 * d2 * (b2 - b4) + l2
d4d2_b2b4_l2x = d4 * d2_b2b4_l2x
d4d2_b2b4_l2y = d4 * d2_b2b4_l2y
d4d2_b2b4_l2z = d4 * d2_b2b4_l2z

// -- d4 * d3 * (b3 - b4) + l3
d4d3_b3b4_l3x = d4 * d3_b3b4_l3x
d4d3_b3b4_l3y = d4 * d3_b3b4_l3y
d4d3_b3b4_l3z = d4 * d3_b3b4_l3z

// d4 * (d1 * (b1 - b4) + l1) - d1 * l4
p1p4x = d4d1_b1b4_l1x - d1p4x
p1p4y = d4d1_b1b4_l1y - d1p4y
p1p4z = d4d1_b1b4_l1z - d1p4z

// d4 * (d2 * (b2 - b4) + l2) - d2 * l4
p2p4x = d4d2_b2b4_l2x - d2p4x
p2p4y = d4d2_b2b4_l2y - d2p4y
p2p4z = d4d2_b2b4_l2z - d2p4z

// d4 * (d3 * (b3 - b4) + l3) - d3 * l4
p3p4x = d4d3_b3b4_l3x - d3p4x
p3p4y = d4d3_b3b4_l3y - d3p4y
p3p4z = d4d3_b3b4_l3z - d3p4z

// -- m = (p1 - p4) cross (p2 - p4)
tmc_a = p1p4x * p2p4y
tmc_b = p1p4y * p2p4x
m01 = tmc_a - tmc_b
tmi_a = p1p4x * p2p4z
tmi_b = p1p4z * p2p4x
m02 = tmi_a - tmi_b
tma_a = p1p4y * p2p4z
tma_b = p1p4z * p2p4y
m12 = tma_a - tma_b

// -- m dot (p3 - p4)
mt1 = m01 * p3p4z
mt2 = m02 * p3p4y
mt3 = m12 * p3p4x

// -- reverse sign because we actually calculate a reversed determinant.
mtt = mt2 - mt1
m012 = mtt - mt3